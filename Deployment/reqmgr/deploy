# vim: set ft=sh sw=2 ts=8 et :
deploy_reqmgr_variants="default offsite"

deploy_reqmgr_deps()
{
  deploy backend
  deploy wmcore-auth
  deploy couchdb $variant
  case $variant in offsite ) deploy wmcore ;; esac
}

deploy_reqmgr_prep()
{
  case $variant in offsite ) extra=install ;; * ) extra= ;; esac
  mkproj $extra
}

deploy_reqmgr_sw()
{
  case $variant in
    default )
      deploy_pkg \
        -a dmwm-service-cert.pem:wmcore/dmwm-service-cert.pem \
        -a dmwm-service-key.pem:wmcore/dmwm-service-key.pem \
        -a reqmgr/ReqMgrSecrets.py comp cms+reqmgr 0.7.5

      if grep -rq "replace me" $project_auth; then
        note "WARNING: replace certificates in $project_auth with real ones"
      else :; fi
      ;;

    offsite )
      deploy_pkg comp external+cherrypy 3.1.2-cmp6
      deploy_pkg comp external+py2-cheetah 2.4.0-cmp6
      deploy_pkg comp external+py2-openid 2.2.4-cmp6
      deploy_pkg comp external+py2-cjson 1.0.5-cmp5
      deploy_pkg comp cms+dls-client DLS_1_1_2-cmp6
      deploy_pkg comp cms+dbs-client DBS_2_1_1_patch1_1

      local wmcore_etc=$root/current/apps/wmcore/etc
      local couchdb_ini=$root/current/config/couchdb/local.ini
      local mysql_config=$root/current/config/mysql/my.cnf

      # get manage script from wmcore
      cp $wmcore_etc/deploy/wmagent-manage $project_config/manage

      # override the webtools couch config
      cp $wmcore_etc/deploy/wmagent-couch.ini $couchdb_ini
      perl -p -i -e "s{deploy_project_root}{$root/projects}g" $couchdb_ini

      # grab the WMAgent MySQL config
      cp $wmcore_etc/deploy/wmagent-mysql.cnf $mysql_config
      ;;
  esac
}

deploy_reqmgr_post()
{
  enable

  case $variant in
    offsite )
      ;;
    default )
      # Tell couchdb to pick up reqmgr on the next restart
      # and configure replication, compaction and backup, too
      local couchdb_config=$root/current/config/couchdb
      local couchdb_state=$root/state/couchdb
      local hour=0

      for area in compaction stagingarea replication backup; do
        rm -f $couchdb_state/$area/reqmgr
        touch $couchdb_state/$area/reqmgr
      done

      local couch_crons=""
      for db in reqmgr_config_cache reqmgr_spec_cache; do
        echo "touch $couchdb_state/database/$db.couch" >> $couchdb_state/stagingarea/reqmgr
        local cmd="$couchdb_config/manage compact $db 'I did read documentation'"
        $nogroups || cmd="sudo -H -u _couchdb bashs -l -c \"${cmd}\""
        couch_crons="${couch_crons}1 $hour * * * $cmd\n"
        hour=$(( $hour + 1 ))
      done

      # Setup ReqMgr cronjobs
      local cmd="$project_config/manage updateversions 'I did read documentation'"
      $nogroups || cmd="sudo -H -u _reqmgr bashs -l -c \"${cmd}\""
      local reqmgr_crons="58 4 * * * $cmd"

      (mkcrontab
       sysboot
       # Enable couch crons only where couchdb is enabled
       case $host in
         vocms10[67] | vocms50 | vocms132 ) ;;
         * ) echo -ne "${couch_crons}" ;;
       esac
       echo "${reqmgr_crons}") | crontab -

      ;;
  esac
}

deploy_reqmgr_auth()
{
  case $1 in
    */*-cert.pem )
      echo "replace me with your dmwm service certificate" ;;
    */*-key.pem )
      echo "replace me with your dmwm service key" ;;
    */ReqMgrSecrets.py )
      echo 'connectUrl = "oracle://FOO:BAR@ZOINKS"' ;;
  esac
}
