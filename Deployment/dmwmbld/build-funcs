def_job_exit_trap() { wait; }

def_job_term_trap() {
    echo "Sending TERM to ${MYCHLD}..."
    kill -SIGTERM $MYCHLD &>/dev/null

    # Explicitly exits, thus avoiding continuing from where the trap occured.
    # Will not call the EXIT trap if it was there when TERM was received.
    exit 1
}

init_job() {
    MYCHLD=" " # this maintains a list of child processes PIDs
    trap 'def_job_exit_trap' EXIT
    trap 'def_job_term_trap' SIGTERM SIGINT
}

run_job() {
    $@ &  # $@ is whatever cames as argument
    MYCHLD+=" $!" # add the child pid to the children list
}

# Deal with differences to osx
echo_e=-e
statfmt="-c %Z"
case $(uname) in Darwin )
  md5sum() { md5 -r ${1+"$@"}; }
  echo_e=
  statfmt="-f %c"
  ;;
esac

NAME='[.a-zA-Z0-9_\-]+'
GLOB='([\*\{\}\?\^\!\.\,a-zA-Z0-9_\-]|\]?|\[?)+'
BTAG='HG[0-9]{4}[-a-zA-Z0-9]+'
DELTA="[ \#]+\+ ?$NAME(\/$NAME|\/\*)?( $GLOB)+"
ENTRY="$BTAG $NAME( \@($ARCHS_RE))($DELTA)* *($|\#)"

job_process_file() {
    init_job
    local REPO=${1:-comp.pre}
    local FILE="${REPO/%comp/comp.}releases"

    echo "---------[$FILE]----------"
    cd $STATE
    [ -d CMSDIST.HEAD ] || cvs co -d CMSDIST.HEAD CMSDIST
    cvs up -A CMSDIST.HEAD ||
        { echo "Could not fetch CMSDIST. Skipping it."; exit 1; }

    # Get rid of comment lines and changes newlines to # to avoid regex headaches
    while read -d "#" ENTRY; do
	echo " * Found entry <$ENTRY>"
	run_job job_build $REPO $ENTRY
    done <<< $(grep -v "#" CMSDIST.HEAD/$FILE | tr -s " \n" " #" | egrep -o "$ENTRY" | tr "#\n" " #")

    wait;
    cat $LOG_FILE.*.$REPO.chk 2>/dev/null; echo;
    rm -f $LOG_FILE.*.$REPO.chk

    exit 0 # job succeeded
}

# Returns 0 delta processing succeeds; 1 otherwise
process_delta() {
    local CMSDIST=$1; shift;

    set -B # Enables brace expansion (disabled by default when running scripts)

    # This loop process each delta
    while [ "$1" = "+" ]; do
        # Gets REV and VER specified on delta
	local REV=${2%%\/*}; local VER=${2#*\/}; shift 2
	[ "$VER" = "$REV" ] && VER="*"  # Blank VER means "*"
	[ "$REV" = "HEAD" -a "$VER" = "*" ] &&
	    { echo "Malformed delta - you must specify version when using HEAD"; return 1; }

	# This loop process files affected by the delta
	while [ "$1" != "+" -a -n "$1" ]; do
	    # $1 is the glob pattern to look for files in CMSDIST HEAD
	    # The 'eval echo' below is needed because brace expansion gets
	    # done before variable expansion.
	    for F in $(eval echo $STATE/CMSDIST.HEAD/$1); do
		test -f "$F" ||
                    { echo "Pattern $1 doesnt expand to any existent file"; return 1; }

		local FNAME=${F##*/} # takes the file name without full path
		echo "DEBUG: file is <$F>"

		# Checks out the file if it doesnt yet exist
		[ -f "$CMSDIST/$FNAME" ] ||
		    { cvs co -r $REV -d $CMSDIST CMSDIST/$FNAME || return 1; }

		local FVER=$(head -n1 $CMSDIST/$FNAME| tr -s " " | cut -d" " -f5 2>/dev/null)
		local FREV=$(grep "/$FNAME/" $CMSDIST/CVS/Entries | cut -d/ -f6 | cut -b2-)
                [ -z "$FREV" ] && FREV=$(grep "/$FNAME/" $CMSDIST/CVS/Entries | cut -d/ -f3)

                [ "$REV" = "HEAD" -a "$VER" != "$FVER" ] &&
                   { cvs up -A $CMSDIST/$FNAME || return 1; }
                [ "$REV" != "HEAD" -a "$REV" != "$FREV" ] &&
                   { cvs up -r $REV $CMSDIST/$FNAME || return 1; } # Make sure the revision match
                [ "$REV" != "HEAD" -a "$REV" = "$FREV" -a "$VER" != "*" -a "$VER" != "$FVER" ] &&
                   { cvs up -r $REV $CMSDIST/$FNAME || return 1; } # Refetch REV to try to match VER

		FVER=$(head -n1 $CMSDIST/$FNAME| tr -s " " | cut -d" " -f5 2>/dev/null)
                [ "$VER" != "*" -a "$VER" != "$FVER" ] &&
                   { echo "Could not match $VER for file $FNAME"; return 1; }
	    done
	    shift
	done
    done
    return 0
}

job_build() {
    init_job
    local REPO=$1; local BASETAG=$2; local PROJ=$3; local ARCH=${4:1}; shift 4;
    local CMSDIST="CMSDIST.$REPO"
    local CMSBUILD=$CMSBUILD17
    case $BASETAG in
      HG12* | HG111* ) CMSBUILD=$CMSBUILD19 ;;
      HG110[789]* )    CMSBUILD=$CMSBUILD18 ;;
    esac

    exec &> $LOG_FILE.$PROJ.$ARCH.$REPO.chk  # Set new log file

    echo; echo "---------[$BASETAG $PROJ@$ARCH $CMSBUILD]----------"
    mkdir -p $BUILDS/${PROJ}_${ARCH}; cd $BUILDS/${PROJ}_${ARCH}
    acquire_lock ${PROJ}_${ARCH} ||
	{ echo "Project ${PROJ}_${ARCH} locked by other process. Skipping."; exit 1; }
    trap 'def_job_exit_trap; release_lock ${PROJ}_${ARCH}' EXIT


    local DIRSUM=$(cat $CMSDIST/* 2>/dev/null | md5sum | tr -d ' -')

    if [ ! -d "$CMSDIST" ]; then
	cvs -Q co -r $BASETAG -d $CMSDIST CMSDIST ||
	    { echo "Error while getting files from CVS"; exit 1; }
    elif [ "$(cat $CMSDIST/CVS/Tag |cut -b2-)" != "$BASETAG" ]; then
	cvs -Q up -r $BASETAG $CMSDIST ||
	    { echo "Error while getting files from CVS"; exit 1; }
    fi

    process_delta $CMSDIST $@ ||
        { echo "Failed to process deltas."; exit 1; }
    [ "$DIRSUM" = "$(cat $CMSDIST/* 2>/dev/null | md5sum | tr -d ' -')" ] &&
        { echo "Nothing changed. Build not necessary"; exit 1; }

    echo "Rebuilding project $PROJ@$ARCH. See logfile $LOG_FILE.$PROJ.$ARCH.$REPO"

    exec &> $LOG_FILE.$PROJ.$ARCH.$REPO  # Set new log file

    # Builds it
    [ -d "tmp" -o -d "w" ] && rm -rf tmp w
    run_job $CMSBUILD -a $ARCH -c $CMSDIST -j 5 --builders=10 \
                      --repository=$REPO build $PROJ --work-dir=w
    wait % || { echo "BUILD: project $PROJ@$ARCH failed to build."; exit 2; }

    # Rpm list generated by this build
    local RPM_FILES=$(find $BUILDS/${PROJ}_${ARCH}/w/RPMS/$ARCH/ -name "*rpm" | tr '\n' ' ')
    [ -z "$RPM_FILES" ] &&
        { echo "BUILD: project $PROJ@$ARCH produced no new RPMs. Skipping."; exit 2; }

    # Now uploads the RPMs
    run_job job_upload $REPO $PROJ $CMSBUILD $ARCH
    wait % || { echo "BUILD: failed to upload $PROJ@$ARCH to repo $REPO"; exit 2; }

    # Publishes the new RPMs and tags CMSDIST
    update_status $REPO $PROJ $ARCH $RPM_FILES

    exit 0
}

# The worst case is when the packages get uploaded
# but the status information is not updated.
#
# Call it only if you have already have the lock
job_upload() {
    init_job
    trap '' EXIT # there is nothing to clean here
    trap 'echo "UPLOAD: cannot TERM while uploading $PROJ@$ARCH"' SIGINT SIGTERM
    local REPO=$1; local PROJ=$2; local CMSBUILD=$3; local ARCH=$4
    local SYNC="--sync-back"; $ISDEV && SYNC=""

    cd $BUILDS/${PROJ}_${ARCH}

    $CMSBUILD $SYNC -a $ARCH -c CMSDIST.$REPO -j 5 --builders=10 \
              --repository=$REPO upload $PROJ --work-dir=w ||
       { echo "UPLOAD: project $PROJ@$ARCH failed to upload.";  exit 1; }

    exit 0 # upload succeeded
}

update_status() {
    local REPO=$1; local PROJ=$2; local ARCH=$3; shift 3

    local RPMS=""
    for RPM; do
	RPM=${RPM%-1-1.$ARCH.rpm} # strip stuff from the end
	RPM=${RPM##*/} # strip the dir path from the beginning
	RPMS+=" $RPM"
    done

    # Creates a new tag
    local TAG="bld_$(date +%s)_${PROJ}_${ARCH}"
    $ISDEV || cvs tag -F $TAG CMSDIST.$REPO

    # Prepares the status information
    local DATE=$(date +"%Y-%m-%d %H:%M:%S %z %a")
    local DIFF="-"

    # Updates the status pages
    for RPM in $RPMS; do
	local PKG=$(echo $RPM|cut -d"+" -f2)
	local ENTRY="| $PKG  | $RPM  | $DATE  | $DIFF  | $TAG  |"
	echo "$ENTRY" >> $WEB/$PKG.$ARCH.$REPO.history
	echo -n "$ENTRY" > $WEB/$PKG.$ARCH.$REPO
    done

    return 0
}

acquire_lock() {
    local PROJ=$1

    # Creates the working area (this works as a lock -- will avoid
    # runnning if there is evidence of another running instance)
    echo "Trying to acquire $BUILDS/$PROJ/lock ..."
    mkdir "$BUILDS/$PROJ/lock" &> /dev/null &&
       { echo "Got $BUILDS/$PROJ/lock"; return 0; }

    # Now tries to recover it
    local LAST_CHANGE=$(stat $statfmt $BUILDS/$PROJ/lock)
    # Here we should remove the lock and clean stuff in case
    # the lock's age is bigger than the watchdog timeout
    if [ $(($(date +%s) - $TIMEOUT - 5)) -gt $LAST_CHANGE ]; then
        # There is a small chance, though, that another process
        # has just released and created it again... **Should fix it**
        # This would happen if two concurrent processes try recover it
        # at the same time.
	release_lock $PROJ
	mkdir "$BUILDS/$PROJ/lock" &> /dev/null &&
	   { echo "Got $BUILDS/$PROJ/lock"; return 0; }
    fi

    echo "Could not get $BUILDS/$PROJ/lock"
    return 1 # could not get the lock
}

release_lock() {
    local PROJ=$1
    echo "Cleanning $BUILDS/$PROJ/lock"
    [ -n "$BUILDS" -a -n "$PROJ" ] &&
       rmdir "$BUILDS/$PROJ/lock"
}
