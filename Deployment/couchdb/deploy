# vim: set ft=sh sw=2 ts=8 et :
deploy_couchdb_variants="default offsite"

deploy_couchdb_deps()
{
  deploy backend
  deploy wmcore-auth
}

deploy_couchdb_prep()
{
  mkproj database replication stagingarea
}

deploy_couchdb_sw()
{
  rm -f $project_auth/hmackey.ini
  deploy_pkg -a couchdb/hmackey.ini comp external+couchdb 1.1.0
  perl -p -i -e "s|{ROOT}|$root|g" $project_config/local.ini

  case $variant in
    default )
      ;;
    * )
      # *FIX* Should properly use a user proxy here once couch
      # ssl client accepts it. Would also need the proxy renewal setup there.
      (echo
       echo "[ssl]"
       echo "cert_file = $root/certs/cert.pem"
       echo "key_file = $root/certs/key.pem"
      ) >> $project_config/local.ini
      ;;
  esac
}

deploy_couchdb_post()
{
  case $variant in
    default )
      (mkcrontab; sysboot
       case $host in
         vocms10[67] | vocms50 | vocms13[2689] )
	   disable ;;
         * )
	   enable
	   local cmd="$project_config/manage compact all 'I did read documentation'"
	   $nogroups || cmd="sudo -H -u _couchdb bashs -l -c \"${cmd}\""
	   echo "12 0 * * * $cmd" ;;
       esac) | crontab -
      ;;
    * )
      enable
      ;;
  esac
}

deploy_couchdb_auth()
{
  perl -e \
    'undef $/; print "[couch_cms_auth]\n";
     print "hmac_secret = ", unpack("h*", <STDIN>), "\n"' < \
    $root/current/auth/wmcore-auth/header-auth-key
}
