# vim: set ft=sh sw=2 ts=8 et :
deploy_workqueue_variants="default offsite"

deploy_workqueue_deps()
{
  deploy couchdb $variant
}

deploy_workqueue_prep()
{
  case $variant in offsite ) extra=install ;; * ) extra= ;; esac
  mkproj $extra cache
}

deploy_workqueue_sw()
{
  case $variant in
    default )
      deploy_pkg \
        -a dmwm-service-cert.pem:wmcore/dmwm-service-cert.pem \
        -a dmwm-service-key.pem:wmcore/dmwm-service-key.pem \
        comp cms+workqueue 0.0.16

      if grep -rq "replace me" $project_auth; then
        note "WARNING: replace certificates in $project_auth with real ones"
      else :; fi
      ;;

    offsite )
      deploy_pkg comp external+cherrypy 3.1.2-cmp6
      deploy_pkg comp external+py2-cheetah 2.4.0-cmp6
      deploy_pkg comp external+py2-openid 2.2.4-cmp6
      deploy_pkg comp external+py2-cjson 1.0.5-cmp5
      deploy_pkg comp cms+dls-client DLS_1_1_2-cmp6
      deploy_pkg comp cms+dbs-client DBS_2_1_1_patch1_1

      local wmcore_etc=$root/current/apps/wmcore/etc
      local couchdb_ini=$root/current/config/couchdb/local.ini
      local mysql_config=$root/current/config/mysql/my.cnf

      # get manage script from wmcore
      cp $wmcore_etc/deploy/wmagent-manage $project_config/manage

      # override the webtools couch config
      cp $wmcore_etc/deploy/wmagent-couch.ini $couchdb_ini
      perl -p -i -e "s{deploy_project_root}{$root/projects}g" $couchdb_ini
      ;;
  esac
}

deploy_workqueue_post()
{
  case $variant in
    offsite )
      ;;
    default)
      local manage=$root/current/config/workqueue/workqueue_task
      local workqueue_state=$root/state/workqueue
      # Tell couchdb to pick up workqueue on the next restart
      # and configure replication, compaction and backup, too
      local couchdb_config=$root/current/config/couchdb
      local couchdb_state=$root/state/couchdb
      local couch_url="http://localhost:5984"
      local hour=2

      sudo -H -u _workqueue bashs -lc "find $workqueue_state/cache -maxdepth 1 -type d -name \".wmcore_cache_*\" | xargs rm -rf"

      for area in compaction stagingarea replication backup; do
        rm -f $couchdb_state/$area/workqueue
        touch $couchdb_state/$area/workqueue
      done

      local couch_crons=""
      local wqapp=$root/current/apps/workqueue
      for db in workqueue workqueue_inbox; do
        local couch_string="${couch_url}/${db}"

        # push app, clean views on startup
        echo "couchapp push $wqapp/lib/couchapps/WorkQueue $couch_string" \
          >> $couchdb_state/stagingarea/workqueue

        echo "$couchdb_config/manage cleanviews $db 'I did read documentation'" \
          >> $couchdb_state/stagingarea/workqueue

        # compact views in cronjob
        local cmd="$couchdb_config/manage compactviews $db WorkQueue 'I did read documentation'"
        $nogroups || cmd="sudo -H -u _couchdb bashs -l -c \"${cmd}\""
        couch_crons="${couch_crons}10 $hour * * * $cmd\n"

        # compact db in cronjob
        local cmd="$couchdb_config/manage compact $db 'I did read documentation'"
        $nogroups || cmd="sudo -H -u _couchdb bashs -l -c \"${cmd}\""
        couch_crons="${couch_crons}40 $hour * * * $cmd\n"

        hour=$(( $hour + 1 ))
      done

      # Setup workqueue cronjobs
      local cmd="$manage reqmgr_sync"
      $nogroups || cmd="sudo -H -u _workqueue bashs -l -c \"${cmd}\""
      local req_sync="5-45/20 * * * * $cmd"

      local cmd="$manage location_refresh"
      $nogroups || cmd="sudo -H -u _workqueue bashs -l -c \"${cmd}\""
      local locations="30 * * * * $cmd"

      local cmd="$manage housekeep"
      $nogroups || cmd="sudo -H -u _workqueue bashs -l -c \"${cmd}\""
      local housekeep="15-55/20 * * * * $cmd"

      (mkcrontab
       case $host in
         vocms10[67] | vocms50 | vocms13[2689] ) ;;
         * ) echo -ne "${couch_crons}" ;;
       esac
       echo "${req_sync}"
       echo "${locations}"
       echo "${housekeep}") | crontab -

      ;;
  esac

}

deploy_workqueue_auth()
{
  case $1 in
    */*-cert.pem )
      echo "replace me with your dmwm service certificate" ;;
    */*-key.pem )
      echo "replace me with your dmwm service key" ;;
  esac
}
